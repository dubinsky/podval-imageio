Defaulting of types: more intelligent?
IFDs are U32?
Do IFD0/IFD1 through emulation of Handler events?
Mapping handlers.



File /home/dub/Photo/g2/2/2297.crw:
<?xml version="1.0" encoding="UTF-8"?>
<org_podval_imageio_ciff_1.0>
  <crwImage offset="26" length="3024436"/>
  <imageProperties>
    <imageSpec>
      <imageWidth value="2272"/>
      <imageHeight value="1704"/>
      <rotationAngle value="0"/>
    </imageSpec>
    <serialNumber>
      <serialNumber value="1222297"/>
      <reserved value="-722367187"/>
    </serialNumber>
    <canonRawProperties>
      <canonRawProperties-50 offset="3095358" length="2048"/>
      <canonRawProperties-54 offset="3097406" length="2048"/>
      <sensor>
        <width value="2376"/>
        <height value="1728"/>
        <unknown-3-U16 value="1"/>
        <unknown-4-U16 value="1"/>
        <offsetX value="32"/>
        <offsetY value="14"/>
        <sensor-7 value="2303"/>
        <sensor-8 value="1717"/>
        <unknown-9-U16 value="2340"/>
        <unknown-10-U16 value="14"/>
        <unknown-11-U16 value="2343"/>
        <unknown-12-U16 value="1717"/>
        <unknown-13-U16 value="0"/>
        <unknown-14-U16 value="0"/>
        <unknown-15-U16 value="0"/>
        <unknown-16-U16 value="0"/>
      </sensor>
      <decodeTable>
        <decodeTable-1 value="0"/>
        <decodeTable-2 value="0"/>
        <decodeTable-3 value="514"/>
        <looksLikeOffset value="3024433"/>
      </decodeTable>
    </canonRawProperties>
  </imageProperties>
</org_podval_imageio_ciff_1.0>





write image:
    JPEGEncodeParam param = new JPEGEncodeParam();
    param.setWriteJFIFHeader(false);
    param.setQuality(0.75f);

    ParameterBlock pb = new ParameterBlock();
    pb.addSource(image);
    pb.add(file.getPath());
    pb.add("JPEG");
    pb.add(param);
    JAI.create("filestore", pb);





  protected void processWindowEvent(WindowEvent e) {
    super.processWindowEvent(e);
    if (e.getID() == WindowEvent.WINDOW_CLOSING) {
      close();
    }
  }


  public AlbumView() {
    enableEvents(java.awt.AWTEvent.WINDOW_EVENT_MASK);
  }


  private void describe(javax.swing.JComponent what) {
    what.addMouseListener(describer);
  }


  private MouseAdapter describer = new MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent e)  {
      if (e.getSource() instanceof AbstractButton)  {
        AbstractButton button = (AbstractButton) e.getSource();
        Action action = button.getAction();

        if (action != null)  {
          Object message = action.getValue(Action.LONG_DESCRIPTION);
          statusBar.setText(message.toString());
        }
      }
    }
  };


  private abstract class DecoratedAction extends javax.swing.AbstractAction {
    private DecoratedAction(
      String name,
      String iconPath,
      String shortDescription,
      String longDescription,
      String accelerator,
      int mnemonic)
    {
      putValue(Action.NAME, name);

      if (iconPath != null)
        putValue(Action.SMALL_ICON, new javax.swing.ImageIcon(AlbumView.class.getResource(iconPath)));

      putValue(Action.SHORT_DESCRIPTION, shortDescription);

      putValue(Action.LONG_DESCRIPTION, longDescription);

      if (accelerator != null)
        putValue(Action.ACCELERATOR_KEY, javax.swing.KeyStroke.getKeyStroke(accelerator));

      if (mnemonic != 0)
        putValue(Action.MNEMONIC_KEY, new Integer(mnemonic));
    }
  }
