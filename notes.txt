Album title - put it into parent's metadata?
Intelligent loading of directory/metadata.
Reloading of the directory/metadata file based on timestamp.

Defaulting of types: more intelligent?
IFDs are U32?
Do IFD0/IFD1 through emulation of Handler events?
Mapping handlers.

Somehow JAI can not load its library (mlib_jai). WTF?

During mass-generation of the images (first index view) sometimes (!) a few (!)
are generated of zero length!!! OutOfMemory?


thumbnailFile = getGeneratedFile("120x160");
screensizedFile = getGeneratedFile("480x640");

  /*
       Controlling this stuff at the per-Action level is a nice idea.  If you're using an Action to create dynamic output already (such as when you directly stream the binary output and then return null), it's quite easy to do today -- your Action will be able to see the "If-Modified-Since" header that the browser sends, and then can decide to return a status 304 (NOT MODIFIED) if your current database stuff is not more recent.

       Something along the lines of this in your Action.execute() method should do the trick:

          // When was our database data last modified?
          long dataModifiedDate = ... timestamp when database last modified ...

          // Have we sent to this user previously?
          long modifiedSince = request.getDateHeader("If-Modified-Since");
          if (modifiedSince > -1) { // i.e. it was actually specified
              if (dataModifiedDate <= modifiedSince) {
                 response.sendError(HttpServletResponse.SC_NOT_MODIFIED);
                  return (null);
              }
          }

          // Set the timestamp so the browser can send back If-Modified-Since
          response.setDateHeader("Date", dataModifiedDate);

          // Now write the actual content type and data
          response.setContentType("mage/jpg");
          ServletOutputStream stream = response.getOutputStream();
          ... write out the bytes ...

          // Return null to tell Struts the response is complete
          return (null);

       Craig
  */


  private static final int BUF_SIZE = 512;


  private void stream(final InputStream is, final OutputStream os) {
    byte[] buf = new byte[BUF_SIZE];
    try {
      while (is.available() > 0) {
        int numBytes = is.read(buf);
        if (numBytes > 0)
          os.write(buf, 0, numBytes);
      }
    } catch (IOException e) {
    } finally {
      try {
        os.flush();
        is.close();
      } catch (IOException e) {
      }
    }
  }


File /home/dub/Photo/g2/2/2297.crw:
<?xml version="1.0" encoding="UTF-8"?>
<org_podval_imageio_ciff_1.0>
  <crwImage offset="26" length="3024436"/>
  <imageProperties>
    <imageSpec>
      <imageWidth value="2272"/>
      <imageHeight value="1704"/>
      <rotationAngle value="0"/>
    </imageSpec>
    <serialNumber>
      <serialNumber value="1222297"/>
      <reserved value="-722367187"/>
    </serialNumber>
    <canonRawProperties>
      <canonRawProperties-50 offset="3095358" length="2048"/>
      <canonRawProperties-54 offset="3097406" length="2048"/>
      <sensor>
        <width value="2376"/>
        <height value="1728"/>
        <unknown-3-U16 value="1"/>
        <unknown-4-U16 value="1"/>
        <offsetX value="32"/>
        <offsetY value="14"/>
        <sensor-7 value="2303"/>
        <sensor-8 value="1717"/>
        <unknown-9-U16 value="2340"/>
        <unknown-10-U16 value="14"/>
        <unknown-11-U16 value="2343"/>
        <unknown-12-U16 value="1717"/>
        <unknown-13-U16 value="0"/>
        <unknown-14-U16 value="0"/>
        <unknown-15-U16 value="0"/>
        <unknown-16-U16 value="0"/>
      </sensor>
      <decodeTable>
        <decodeTable-1 value="0"/>
        <decodeTable-2 value="0"/>
        <decodeTable-3 value="514"/>
        <looksLikeOffset value="3024433"/>
      </decodeTable>
    </canonRawProperties>
  </imageProperties>
</org_podval_imageio_ciff_1.0>





  protected void processWindowEvent(WindowEvent e) {
    super.processWindowEvent(e);
    if (e.getID() == WindowEvent.WINDOW_CLOSING) {
      close();
    }
  }


  public AlbumView() {
    enableEvents(java.awt.AWTEvent.WINDOW_EVENT_MASK);
  }


  private void describe(javax.swing.JComponent what) {
    what.addMouseListener(describer);
  }


  private MouseAdapter describer = new MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent e)  {
      if (e.getSource() instanceof AbstractButton)  {
        AbstractButton button = (AbstractButton) e.getSource();
        Action action = button.getAction();

        if (action != null)  {
          Object message = action.getValue(Action.LONG_DESCRIPTION);
          statusBar.setText(message.toString());
        }
      }
    }
  };


  private abstract class DecoratedAction extends javax.swing.AbstractAction {
    private DecoratedAction(
      String name,
      String iconPath,
      String shortDescription,
      String longDescription,
      String accelerator,
      int mnemonic)
    {
      putValue(Action.NAME, name);

      if (iconPath != null)
        putValue(Action.SMALL_ICON, new javax.swing.ImageIcon(AlbumView.class.getResource(iconPath)));

      putValue(Action.SHORT_DESCRIPTION, shortDescription);

      putValue(Action.LONG_DESCRIPTION, longDescription);

      if (accelerator != null)
        putValue(Action.ACCELERATOR_KEY, javax.swing.KeyStroke.getKeyStroke(accelerator));

      if (mnemonic != 0)
        putValue(Action.MNEMONIC_KEY, new Integer(mnemonic));
    }
  }
